/**
 * Servi√ßo para gerenciar inten√ß√µes e respostas do bot
 */
const intents = require("../conversation/intents.json").intents;
const { getEmojiResponse } = require('../config/emojis');

// Comandos do bot
const BOT_COMMANDS = {
  MENU: 'gabot',
  HELP: 'ajuda',
  ABOUT: 'sobre'
};

/**
 * Verifica se uma string cont√©m alguma das palavras-chave
 * @param {string} text - Texto a ser verificado
 * @param {string[]} keywords - Lista de palavras-chave
 * @returns {boolean} - Verdadeiro se encontrar alguma palavra-chave
 */
function containsAny(text, keywords) {
  if (!text || !keywords) return false;
  return keywords.some(keyword => text.toLowerCase().includes(keyword.toLowerCase()));
}

/**
 * Verifica se o texto √© um comando do bot
 * @param {string} text - Texto a ser verificado
 * @returns {boolean} - Verdadeiro se for um comando
 */
function isBotCommand(text) {
  if (!text) return false;
  const cleanText = text.toLowerCase().trim();
  return Object.values(BOT_COMMANDS).includes(cleanText);
}

/**
 * Verifica se o formato do reposit√≥rio √© v√°lido
 * @param {string} text - Texto a ser verificado
 * @returns {boolean} - Verdadeiro se o formato for v√°lido
 */
function isValidRepoFormat(text) {
  if (!text) return false;
  
  // Remove espa√ßos extras e converte para min√∫sculo
  const cleanText = text.trim().toLowerCase();
  
  // Se for um comando do bot, n√£o √© um reposit√≥rio
  if (isBotCommand(cleanText)) return false;
  
  // Verifica se tem exatamente uma barra
  if ((cleanText.match(/\//g) || []).length !== 1) return false;
  
  // Divide em usu√°rio e reposit√≥rio
  const [user, repo] = cleanText.split('/');
  
  // Verifica se ambos os lados t√™m pelo menos 1 caractere
  if (!user || !repo) return false;
  
  // Verifica se cont√©m apenas caracteres v√°lidos (letras, n√∫meros, h√≠fen, underscore e ponto)
  const validChars = /^[a-z0-9_.-]+$/;
  if (!validChars.test(user) || !validChars.test(repo)) return false;
  
  // Verifica tamanho m√°ximo (40 caracteres para cada lado, conforme limite do GitHub)
  if (user.length > 40 || repo.length > 100) return false;
  
  return true;
}

/**
 * Obt√©m uma resposta aleat√≥ria para uma inten√ß√£o
 * @param {string} intent - Nome da inten√ß√£o
 * @returns {string} - Resposta aleat√≥ria
 */
function getRandomResponse(intent) {
  if (!intent || !intents[intent] || !intents[intent].responses) {
    return "Desculpe, n√£o entendi. Tente novamente ou envie 'gabot' para ver o menu.";
  }
  const responses = intents[intent].responses;
  return responses[Math.floor(Math.random() * responses.length)];
}

/**
 * Detecta a inten√ß√£o do usu√°rio com base na mensagem
 * @param {string} message - Mensagem do usu√°rio
 * @returns {string} - Nome da inten√ß√£o detectada
 */
function detectIntent(message) {
  if (!message || typeof message !== 'string') {
    return "unknown";
  }

  const text = message.toLowerCase().trim();

  // Verifica se √© um comando do bot
  if (isBotCommand(text)) {
    if (text === BOT_COMMANDS.MENU) return "menu";
    if (text === BOT_COMMANDS.HELP) return "help";
    if (text === BOT_COMMANDS.ABOUT) return "about";
  }

  // Verifica se √© um emoji √∫nico
  if (text.length === 2 || (text.length === 4 && text.includes('‚Äç'))) {
    return "emoji";
  }

  // Verifica sauda√ß√µes
  if (containsAny(text, intents.greeting.keywords)) {
    return "greeting";
  }

  // Verifica ajuda
  if (containsAny(text, intents.help.keywords)) {
    return "help";
  }

  // Verifica despedidas
  if (containsAny(text, intents.farewell.keywords)) {
    return "farewell";
  }

  // Verifica formato de reposit√≥rio
  if (isValidRepoFormat(text)) {
    return "searching";
  }

  // Se n√£o encontrou nenhuma inten√ß√£o espec√≠fica
  return "invalid_format";
}

/**
 * Obt√©m uma resposta apropriada para a mensagem do usu√°rio
 * @param {string} message - Mensagem do usu√°rio
 * @returns {string} - Resposta do bot
 */
function getResponse(message) {
  if (!message || typeof message !== 'string') {
    return "Desculpe, n√£o entendi. Tente novamente ou envie 'gabot' para ver o menu.";
  }

  const intent = detectIntent(message);

  // Se for um emoji, retorna uma resposta de emoji
  if (intent === "emoji") {
    try {
      return getEmojiResponse(message);
    } catch (error) {
      console.error("Erro ao processar emoji:", error);
      return "üòÖ"; // Emoji de fallback
    }
  }

  return getRandomResponse(intent);
}

module.exports = {
  detectIntent,
  getResponse,
  getRandomResponse,
  isValidRepoFormat,
  BOT_COMMANDS
}; 